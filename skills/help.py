from opsdroid.skill import Skill
from opsdroid.matchers import match_regex


class Help(Skill):
    @match_regex(r'/help')
    async def help(self, message):
        persian_response = 'نکات زیر در رابطه با استفاده از ربات مفید است:'
        persian_response += '\n'
        persian_response += '۱- شما می‌توانید این ربات را به هر اتاق دلخواهی اضافه کنید.'
        persian_response += '\n'
        persian_response += '۲- ربات هنگام اضافه شدن اعضای جدید پیام خوش‌آمدگویی اختصاصی می‌دهد.'
        persian_response += '\n\n'
        persian_response += 'در ربات دستورات زیر وجود دارد:'
        persian_response += '\n'
        persian_response += '1- /help: نمایش این راهنما'
        persian_response += '\n'
        persian_response += '2- /info number\ntext: نشان دادن اطلاعات موجود در text. این اطلاعات شامل تلفن همراه، تلفن خانه، ایمیل، آدرس و مشخص کردن بلندی یا کوتاهی پیام است.'
        persian_response += '\n'
        persian_response += 'همچنین یک number نیز به عنوان ورودی می‌تواند بگیرد که نشان‌دهنده‌ی معیار بلندی و یا کوتاهی پیام بر حسب کاراکتر است. مقدار پیش‌فرض آن ۱۰۰ است.'
        persian_response += '\n'
        persian_response += '3- /add name\nregex: اضافه کردن یک نام و الگوی متناسب'
        persian_response += '\n'
        persian_response += '4- /checkall\ntext: چک کردن تمامی الگوهای موجود در text'
        persian_response += '\n'
        persian_response += '5- /checkone\ntext\n\nregex: چک کردن یک الگوی regex در text'
        persian_response += '\n'
        persian_response += '6- /generate population generation\ntexts: تولید الگوهای regex برای متن‌های موجود'
        persian_response += '\n'
        persian_response += 'توجه کنید که هر خط از texts یک پیام جدید برای ربات محاسبه می‌شود. همچنین چون مبنای الگوریتم، الگوریتم genetic است، دو پارامتر population و generation را نیز به عنوان ورودی می‌توان به ربات داد ولی مقدارهای پیش‌فرض آن ۱۰۰ و ۲ است. همچنین population باید بین ۱۰ تا ۱۰۰ و generation بین ۱ تا ۳۰ باشد.'
        persian_response += '\n\n'
        persian_response += 'اوقات خوشی را برای شما در استفاده از ربات آرزومندیم!'

        english_response = 'The following points are useful for using the bot:'
        english_response += '\n'
        english_response += '1- You can add this bot to any room you want.'
        english_response += '\n'
        english_response += '2- The bot gives a welcome message when new members are added.'
        english_response += '\n\n'
        english_response += 'The bot has the following commands:'
        english_response += '\n'
        english_response += '1- /help: Show this help'
        english_response += '\n'
        english_response += '2- /info number\ntext: Show the information available in text. This information includes mobile phone, home phone, email, address, and determining the length or shortness of the message.'
        english_response += '\n'
        english_response += 'It can also take a number as input, which indicates the length or shortness criterion of the message in characters. It\'s defalut is 100.'
        english_response += '\n'
        english_response += '3- /add name\nregex: Add a name and the corresponding pattern'
        english_response += '\n'
        english_response += '4- /checkall\ntext: Check all patterns available in text'
        english_response += '\n'
        english_response += '5- /checkone\ntext\n\nregex: Check a regex pattern in text'
        english_response += '\n'
        english_response += '6- /generate population generation\ntexts: Generate regex patterns for the given texts'
        english_response += '\n'
        english_response += 'Note that each line of texts is a new message for the bot to calculate. Also, since the base algorithm is genetic, two parameters population and generation can be given to the bot as input, but their default values are 100 and 2. Also, population must be between 10 and 100 and generation between 1 and 30.'
        english_response += '\n\n'
        english_response += 'We wish you a good time using the bot!'

        await message.respond(english_response)
